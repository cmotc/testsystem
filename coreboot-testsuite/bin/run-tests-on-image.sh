#!/bin/bash

IMAGE=$1
BOARD=`echo $IMAGE|cut -f3 -d/`
RELEASE=`echo $IMAGE|cut -f2 -d/|cut -f3 -d-`

# we are run via at.
TOP=$2
TEMP=$TOP/results

cd $TOP

#
# What we want is to execute as many tests as possible at once.
# Thus this process is started as an at job and waiting for its
# hardware lock to be released.
#
# we need to lock the hardware, if we want to run several tests
# at once, as a hardware instance can only run a test at once.
#
# If you have multiple boards connected, this will speed up 
# testing significantly.
#

LOCK=$TEMP/$BOARD.lck

printf "Acquiring lock"
# wait for lock
while [ -r $LOCK ]; do
  printf "."
  sleep 60
done

touch $LOCK


printf " succeeded.\n"

# now do the deed.

DIR="${IMAGE/images\//}"
DIR=`dirname $DIR`

# we create a new directory for each test
# so we can have several test instances running 
# simultaneously
mkdir -p $TEMP/$DIR
cd $TEMP/$DIR

touch running


cp $TOP/config/$BOARD $BOARD.cfg
source $BOARD.cfg

# Create site.exp with all variables
# for dejagnu

echo "
# site.exp 
# 
# (c) 2006 coresystems GmbH
# 
# file is autogenerated by $0
#
set tool LinuxBIOS
#
set srcdir $TOP/testsuite
set objdir $TOP/testsuite
#
set POWER $TOP/hw/power/$POWER_TYPE/power.sh
set IOC $TOP/hw/ioc/$IOC_TYPE
set CONSOLE $TOP/hw/console/$CONSOLE_TYPE/console.sh
set CONSLOG $TEMP/$DIR/console.out
#
set port $POWER_PORT
#
set IMAGE $IMAGE
# 
set TESTDIR `pwd`

#
# Board configuration variables:
#

" > site.exp

cat $BOARD.cfg | while read line; do
  name="${line%%=*}"
  value="${line##*=}"
  if [ "$name" != "" -a "$value" != "" -a "${line:0:1}" != "#" ]; then
    echo "set $name $value"
  else
    echo "$line"
  fi
done >> site.exp

# Flash the new firmware image

$TOP/bin/update-image.sh `pwd`/$BOARD.cfg $IMAGE $TOP

# move flash log to the right place. We need to do this
# here because update-image does not know where to put it.
 
if [ -f $TOP/$IMAGE.flash.log ]; then
	mv -f $TOP/$IMAGE.flash.log $TEMP/$DIR/flash.log
fi

if [ $? != 0 ]; then
	printf "FLASH FAILED: TEST FAILED bailing out.\n"
	exit 1
fi

# run dejagnu testsuite on this board
# 

/usr/bin/time runtest --xml || echo "runtest failed with $?"

# in case this was not done, release the IOC.
# If the IOC is not released, following tests might fail,
# or we end up with a lot of running processes in the best case.

$TOP/hw/ioc/$IOC_TYPE/exit.sh

# fix console log permissions. serial2stdio creates files that are not
# readable by the owner.

chmod 644 $TEMP/$DIR/console.out

# dejagnu does not create valid XML files. If we output < or >
# the file is incorrect. Also ESC, LR and SI make xsltproc and others
# fail.

perl -pi -e 's,<input>,<input><![CDATA[\n,g' $TEMP/$DIR/LinuxBIOS.xml
perl -pi -e 's,</input>,\n]]></input>,g' $TEMP/$DIR/LinuxBIOS.xml
perl -pi -e 's,<output>,<output><![CDATA[\n,g' $TEMP/$DIR/LinuxBIOS.xml
perl -pi -e 's,</output>,\n]]></output>,g' $TEMP/$DIR/LinuxBIOS.xml
perl -pi -e 's,,<ESC>,g' $TEMP/$DIR/LinuxBIOS.xml
perl -pi -e 's,,<LF>,g' $TEMP/$DIR/LinuxBIOS.xml
perl -pi -e 's,,<SI>,g' $TEMP/$DIR/LinuxBIOS.xml
perl -pi -e 's,,<BEL>,g' $TEMP/$DIR/LinuxBIOS.xml

# Mark the test as non-running and completed
# 
touch $TEMP/$DIR/completed
rm $TEMP/$DIR/running

# remove lock
# 
printf "Releasing lock "
rm -f $LOCK 
printf "succeeded.\n"

printf "`basename $0` ran ${SECONDS}s\n"

